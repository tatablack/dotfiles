#!/usr/bin/env bash

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

# Get information about the current brew installation, if any
command -v brew>/dev/null
is_brew_in_path=$?

if (( is_brew_in_path == 0 )); then
  fancy_echo "Homebrew is in the PATH"
else
  fancy_echo "Homebrew is not in the PATH"
fi

[[ -f "/usr/local/bin/brew" ]]
is_brew_installed_on_intel=$?

if (( is_brew_installed_on_intel == 0 )); then
  fancy_echo "(for Intel machines)"
fi

[[ -f "/opt/homebrew/bin/brew" ]]
is_brew_installed_on_apple_silicon=$?

if (( is_brew_installed_on_apple_silicon == 0 )); then
  fancy_echo "(for Apple Silicon machines)"
fi

if (( is_brew_installed_on_intel == 0 )) || (( is_brew_installed_on_apple_silicon == 0 )); then
  is_brew_installed=0
else
  is_brew_installed=1
fi

if (( is_brew_installed_on_apple_silicon == 0)); then
  fancy_echo "Searching for the Apple Silicon Homebrew path for GUI apps..."
  grep -sq '/opt/homebrew/bin' /private/var/db/com.apple.xpc.launchd/config/user.plist
else
  fancy_echo "Searching for the Intel Homebrew path for GUI apps..."
  grep -sq '/usr/local/bin' /private/var/db/com.apple.xpc.launchd/config/user.plist
fi
is_brew_in_path_for_gui_apps=$?

if (( is_brew_in_path_for_gui_apps == 0 )); then
  fancy_echo "...found."
else
  fancy_echo "...not found."
fi

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "\nThe bootstrap procedure did not complete.\n\n" >&2; exit $ret' EXIT
set -e

# Get information from the user
fancy_echo "Bootstrap sequence initiated"

if [[ ! -f "$HOME/Library/Application Support/rbw/config.json" ]]; then
  read -rp "Please, provide the email associated to your Bitwarden account: " EMAIL_BITWARDEN
  read -rp "If you want to use a custom Bitwarden server, provide its url now (including the trailing slash): " BITWARDEN_SERVER
fi

read -rp "Please, provide the GitHub username associated to the dotfiles you want to use with chezmoi: " GH_USERNAME
read -rp "Finally, provide a hostname for this computer (no spaces): " HOSTNAME

# Ask for the administrator password up front
fancy_echo "We'll need superuser privileges later on (e.g. to set the machine's hostname), so..."
sudo -v

# Keep-alive: update existing `sudo` timestamp until the current script has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

# Computer name
sudo scutil --set ComputerName "$HOSTNAME"
sudo scutil --set HostName "$HOSTNAME"
sudo scutil --set LocalHostName "$HOSTNAME"
sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$HOSTNAME"
echo "This computer is now known as \"$HOSTNAME\"."

# Homebrew
if (( is_brew_in_path != 0 )) && (( is_brew_installed != 0 )); then
  fancy_echo "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
  fancy_echo "Homebrew is already installed; moving on."
fi

# Set the Homebrew path for GUI apps. See:
# - https://docs.brew.sh/FAQ#my-mac-apps-dont-find-homebrew-utilities
# - https://stackoverflow.com/a/70510488/224426
if (( is_brew_in_path_for_gui_apps != 0 )); then
  fancy_echo "Setting Homebrew path for GUI apps..."
  if (( is_brew_installed_on_apple_silicon == 0 )); then
    fancy_echo "(on Apple Silicon)"
    sudo launchctl config user path "/opt/homebrew/bin:${PATH}"
  else
    fancy_echo "(on Intel)"
    sudo launchctl config user path "/usr/local/bin:${PATH}"
  fi
fi

# Set the Homebrew path for Apple Silicon
if (( is_brew_installed_on_apple_silicon == 0 )); then
  fancy_echo "Setting Homebrew path for Bash on Apple Silicon..."

  if ! grep -sq "/opt/homebrew/bin/brew" "${HOME}"/.bashrc; then
    export PATH=/opt/homebrew/bin:${PATH}
    echo "export PATH=/opt/homebrew/bin:${PATH}" >> "${HOME}"/.bashrc
  fi
fi

fancy_echo "Installing Homebrew formulae..."
brew bundle --file=- <<EOF
brew "bash"         # Need a recent version for certain scripts run by chezmoi
brew "chezmoi"      # Dotfiles manager
brew "mas"          # Used by Brew to install apps from the Mac App Store
brew "pinentry-mac" # Pinentry GUI, used by rbw 
brew "rbw"          # Alternative Bitwarden CLI
EOF

if [[ ! -f "$HOME/Library/Application Support/rbw/config.json" ]]; then
  fancy_echo "Configuring Bitwarden client..."
  rbw config set email "${EMAIL_BITWARDEN}"

  if [[ -n "${BITWARDEN_SERVER}" ]]; then
    rbw config set base_url "${BITWARDEN_SERVER}"
  fi

  rbw config set pinentry "pinentry-mac"
fi

fancy_echo "Updating Bitwarden vault"
rbw sync

# Delegate further actions to chezmoi scripts in my own dotfiles repository
fancy_echo "Delegating to chezmoi..."
chezmoi init --apply "${GH_USERNAME}"

# And we're done
fancy_echo "Bootstrap finished."
