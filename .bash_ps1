############################################
# Modified from emilis bash prompt script
# from https://github.com/emilis/emilis-config/blob/master/.bash_ps1
#
# Modified for Mac OS X by
# @corndogcomputer
###########################################
# (these are recalculated every time the prompt is shown in function prompt_command):
fill=""
gitinfo=
usercolor=""

# The current hostname, to be shown
# above every prompt
hostname=`hostname -f`

## COLORS ###
           RED="\e[31m"
     LIGHT_RED="\e[91m"
      BOLD_RED="\e[1;31m"
        YELLOW="\e[33m"
  LIGHT_YELLOW="\e[93m"
          BLUE="\e[34m"
    LIGHT_BLUE="\e[94m"
         GREEN="\e[32m"
   LIGHT_GREEN="\e[92m"
          CYAN="\e[36m"
    LIGHT_CYAN="\e[96m"
       MAGENTA="\e[35m"
 LIGHT_MAGENTA="\e[95m"
         WHITE="\e[97m"
    LIGHT_GRAY="\e[37m"
     DARK_GRAY="\e[90m"
         BLACK="\e[30m"
     RESET_ALL="\e[0m"
    RESET_BOLD="\e[21m"


# Reset color for command output
# (this one is invoked every time before a command is executed):
trap 'echo -ne "\033[00m"' DEBUG


# This will parse `git status` output
# to show the current working branch,
# and any incoming / outgoing changes.
function parse_git_branch {
    branch=
    remote=
    state=
    statuscolor=
    bracket=

    git rev-parse --git-dir &> /dev/null
    git_status="$(git status 2> /dev/null)"
    branch_pattern="^# On branch ([^${IFS}]*)"
    detached_branch_pattern="# Not currently on any branch"
    remote_pattern="# Your branch is (.*) of"
    diverge_pattern="# Your branch and (.*) have diverged"

    if [[ ${git_status}} =~ "Changed but not updated" ]]; then
        statuscolor=${RED}
        state="⚡"
    fi

    # add an else if or two here if you want to get more specific
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
            statuscolor=${YELLOW}
            remote="↑"
        else
            statuscolor=${YELLOW}
            remote="↓"
        fi
    fi

    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        statuscolor=${YELLOW}
        remote="${YELLOW}↕"
    fi

    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[1]}
    elif [[ ${git_status} =~ ${detached_branch_pattern} ]]; then
        statuscolor=${YELLOW}
        branch="NO BRANCH"
    fi

    if [[ ${#state} -gt "0" || ${#remote} -gt "0" ]]; then
        s=" "
    fi

    gitinfo="${branch}${s}${remote}${state}"
}


# At every prompt display, we need to recalculate:
# - git repository information
# - the size of the dashed line above the prompt
# - the hostname's color
# - the username's color
function prompt_command {
    parse_git_branch

    if [ ! -z "$gitinfo" ]
    then
        branch="($branch"
        bracket=")"
    fi

    fill=""
    usercolor=""

    # we need to create a dashed line, as wide as the screen,
    # minus the time string (8 chars), the hostname,
    # a few spaces and separators (3 chars).
    # It should look like this:
    # @HOSTNAME.DOMAIN ------------------ hh:mm:ss
    # USERNAME:PATH $
    let fillsize=${COLUMNS}-${#hostname}-11

    while [ "$fillsize" -gt "0" ]
    do
        fill="-${fill}" # fill with dashes
        let fillsize=${fillsize}-1
    done

    # Here we assume that some other configuration
    # file set this property depending on the host
    if [ "${IS_PRODUCTION_HOST}" == "true" ]; then
        hostcolor="1;31" # Bold red
    else
        hostcolor="32" # Green
    fi

    # I want to be red if I'm root
    if [ "$(id -u)" == "0" ]; then
        usercolor="1;31" # Bold red
    else
        usercolor="95" # Light magenta
    fi
}

# Finally, prepare the prompt:
export PROMPT_COMMAND=prompt_command
export PS1="\e["'${hostcolor}'"m"'@${hostname}'${DARK_GRAY}' $fill '${LIGHT_GRAY}'\t\n'"\e["'${usercolor}'"m"'\u'${LIGHT_BLUE}':\w '${RESET_ALL}'${branch}${s}'"${statuscolor}"'${remote}${state}'"${RESET_ALL}"'${bracket}'"${RESET_ALL}\$ ${YELLOW}"



